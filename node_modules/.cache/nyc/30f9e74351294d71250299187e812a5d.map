{"version":3,"sources":["auth_controller.js"],"names":["user","authDB","dbo","query","username","collection","find","toArray","result","length","hash","password","isMatch","userValidation","userdetails","check","insertOne","ops","registerUser"],"mappings":";;;;;;;;qEAGA,iBAA8BA,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACoBC,iBAAOA,MAAP,EADpB;;AAAA;AACQC,eADR;AAEQC,iBAFR,GAEgB,EAAEC,UAAUJ,KAAKI,QAAjB,EAFhB;AAAA;AAAA,mBAGuBF,IAAIG,UAAJ,CAAe,OAAf,EAAwBC,IAAxB,CAA6BH,KAA7B,EAAoCI,OAApC,EAHvB;;AAAA;AAGQC,kBAHR;;AAAA,kBAIMA,OAAOC,MAAP,KAAkB,CAJxB;AAAA;AAAA;AAAA;;AAAA,6CAKW,KALX;;AAAA;AAOQC,gBAPR,GAOeF,OAAO,CAAP,EAAUG,QAPzB;AAAA;AAAA,mBAQwB,qBAAQX,KAAKW,QAAb,EAAuBD,IAAvB,CARxB;;AAAA;AAQQE,mBARR;;AAAA,iBASMA,OATN;AAAA;AAAA;AAAA;;AAAA,6CAUWJ,OAAO,CAAP,EAAUJ,QAVrB;;AAAA;AAAA,6CAYS,KAZT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeS,c;;;;;;sEAef,kBAA4BC,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEUd,gBAFV,GAEiBc,WAFjB;AAAA;AAAA,mBAGsBb,iBAAOA,MAAP,EAHtB;;AAAA;AAGUC,eAHV;AAIUC,iBAJV,GAIkB,EAAEC,UAAUU,YAAYV,QAAxB,EAJlB;AAAA;AAAA,mBAKwBF,IAAIG,UAAJ,CAAe,OAAf,EAAwBC,IAAxB,CAA6BH,KAA7B,EAAoCI,OAApC,EALxB;;AAAA;AAKUQ,iBALV;;AAAA,kBAMQA,MAAMN,MAAN,KAAiB,CANzB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAOyB,kBAAMT,KAAKW,QAAX,EAAqB,EAArB,CAPzB;;AAAA;AAOYD,gBAPZ;;AAQMV,iBAAKW,QAAL,GAAgBD,IAAhB;AARN;AAAA,mBAS2BR,IAAIG,UAAJ,CAAe,OAAf,EAAwBW,SAAxB,CAAkChB,IAAlC,CAT3B;;AAAA;AASYQ,kBATZ;AAAA,8CAUaA,OAAOS,GAAP,CAAW,CAAX,EAAcb,QAV3B;;AAAA;AAAA,8CAYW,KAZX;;AAAA;AAAA;AAAA;AAAA,8CAcW,KAdX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAec,Y;;;;;AAlBf;;AACA;;;;;;;;QAmCSA,Y,GAAAA,Y;QACAL,c,GAAAA,c","file":"auth_controller.js","sourceRoot":"/home/dev/auth-module/src/controller","sourcesContent":["import { compare, hash as _hash } from 'bcrypt';\nimport authDB from '../Config/authDb';\n\nasync function userValidation(user) {\n  const dbo = await authDB.authDB();\n  const query = { username: user.username };\n  const result = await dbo.collection('users').find(query).toArray();\n  if (result.length === 0) {\n    return false;\n  }\n  const hash = result[0].password;\n  const isMatch = await compare(user.password, hash);\n  if (isMatch) {\n    return result[0].username;\n  }\n  return false;\n}\n\nasync function registerUser(userdetails) {\n  try {\n    const user = userdetails;\n    const dbo = await authDB.authDB();\n    const query = { username: userdetails.username };\n    const check = await dbo.collection('users').find(query).toArray();\n    if (check.length === 0) {\n      const hash = await _hash(user.password, 10);\n      user.password = hash;\n      const result = await dbo.collection('users').insertOne(user);\n      return result.ops[0].username;\n    }\n    return false;\n  } catch (err) {\n    return false;\n  }\n}\n\nexport { registerUser };\nexport { userValidation };\n"]}